#!/bin/bash -l

SCRIPT_NAME="$(basename ${0#_} .uge-nextflow)"

# Set profile
# Get node number - <=230 = biolinux, >=231 = rosalind
NODE_NUM=$(echo ${HOSTNAME%%.*} | sed 's/node//1')
if [[ ${NODE_NUM} -ge 231 ]]; then
  HPC='rosalind_hpc'
else
  HPC='aspen_hpc'
fi

module load nextflow
nextflow \
  -log ${OUT}/log/nextflow_log.${SCRIPT_NAME}.txt \
  run \
  ${LAB_HOME}/workflows/wf-paired-end-illumina-assembly/main.nf \
  -profile ${HPC} \
  --input ${IN} \
  --outdir ${OUT} \
  -ansi-log false \
  -N ${USER}@cdc.gov \
  -w ${OUT}/.work \
  --kraken1_db /scicomp/reference-pure/kraken/OLD/1.0.0/kraken_db \
  --blast_db ${LAB_HOME}/.databases/ncbi \
  --kraken2_db ${LAB_HOME}/.databases/kraken2 \
  --gtdbtk_db ${LAB_HOME}/.databases/GTDB/release207_v2 \
  -resume

# Check for errors and add to errors.tsv
# Get nextflow run name
run_name=$(grep "Launching" ${OUT}/log/ASM_*.o${SCRIPT_NAME} | cut -d '[' -f 2 | cut -d ']' -f 1)

# Read each line from nextflow log, find info, and add to errors.tsv
while read -r line; do
  # Get time stamp
  time_stamp=$(date '+%Y-%b-%d %a %H:%M:%S')

  # If process is already running, clean up error
  if [[ "${line}" =~ ^Unable[[:space:]]to[[:space:]]acquire[[:space:]]lock.* ]]; then
    error="You are trying to resume the execution of an already running pipeline."
    ASM_OUT=$(realpath ${OUT}/log/ASM_*.o*)
    echo -e "-\t-\t${error}\t${ASM_OUT}\t${time_stamp}\t${run_name}" >> ${OUT}/log/errors.tsv
  else
    # Workflow ran some processes
    sample_name=$(grep "nf-" ${line}/.command.run | cut -d '(' -f 2 | cut -d ')' -f 1)
    process=$(grep "nf-" ${line}/.command.run | awk -F 'nf-' '{print $2}' | sed -e 's/_(.*//')
    error=$(tail -n 1 ${line}/.command.err | sed -e 's/\[[^][]*\] //g')

    # Kraken 2 places "Loading database information... done." in error log
    if [[ ${process} =~ .*READ_CLASSIFY_KRAKEN_TWO$ ]] \
      && [[ "${error}" =~ Loading[[:space:]]database[[:space:]]information.*$ ]]; then
      continue
    fi

    # BBDuk java error for wonky input FastQ files
    if [[ ${process} =~ .*REMOVE_PHIX_BBDUK$ ]] \
      && [[ "${error}" =~ .*at.* ]]; then
      error=$(grep -A1 "java.lang" ${line}/.command.err | head -n 2 | tail -n 1)
    fi

    # Check if error is from file checks
    if [[ ${error} =~ .+Check[[:space:]]failed$ ]]; then
      get_previous_process_workdir=$(dirname $(grep "ln -s" ${line}/.command.run | grep "work" | awk 'END {print $(NF-1)}' ))
      process=$(grep "nf-" ${get_previous_process_workdir}/.command.run | awk -F 'nf-' '{print $2}' | sed -e 's/_(.*//')
      line="${get_previous_process_workdir}"
    fi

    # Check if process is EXTRACT_16S_BIOPYTHON -> requires different sed commands
    if [[ ${process} =~ .*EXTRACT_16S_BIOPYTHON$ ]]; then
      get_filename=$(tail -n 1 ${line}/.command.err | awk -F '/' '{print $NF}')
      remove_filepath=$(tail -n 1 ${line}/.command.err | sed -e 's/[][]//g' | cut -d '/' -f 1)
      error=$(echo -e "${remove_filepath} ${get_filename}")
    fi

    # If process for sample retried and succeeded, ignore
    if [[ -f "$(ls ${OUT}/log/process_logs/${sample_name}.${process}*out)" ]] \
      && [[ $(cat ${line}/.exitcode) = @(0|143|137|104|134|139|71|255) ]]; then
      continue
    else
      echo -e "${sample_name}\t${process}\t${error}\t${line}\t${time_stamp}\t${run_name}" >> ${OUT}/log/errors.tsv
    fi
  fi
done < <(nextflow log ${run_name} -filter 'status == "FAILED"')

# If errors.tsv found..
if [[ -f "${OUT}/log/errors.tsv" ]]; then
  # Add column headers
  sed -i '1i Sample Name\tProcess\tError\tError Directory\tTimestamp\tRun Name' ${OUT}/log/errors.tsv

  # Remove duplicate lines and lines that have an empty first column
  awk '!a[$0]++' ${OUT}/log/errors.tsv \
    | awk -F '\t' '$1{print $0}' \
    > ${OUT}/log/errors_new.tsv

  # Delete original errors.tsv and rename errors_new.tsv
  rm ${OUT}/log/errors.tsv

  mv ${OUT}/log/errors_new.tsv \
    ${OUT}/log/errors.tsv
fi

# Count lines in Summary.Illumina.GenomeCoverage.tab
if [[ -f "${OUT}/qa/Summary.Illumina.GenomeCoverage.tab" ]]; then
  num_assemblies=$(wc -l ${OUT}/qa/Summary.Illumina.GenomeCoverage.tab | awk '{print $1}')
fi

# E-mail completion status
if [[ -f "${OUT}/qa/Summary.Illumina.GenomeCoverage.tab" ]] \
  && [[ -f "${OUT}/log/errors.tsv" ]]; then
  echo -e "Assembly and QA finished on $(date)\n${OUT}" | mail \
  -s "${num_assemblies} assembled $(basename "${OUT}") [HPC]" \
  -S smtp="smtpgw.cdc.gov" \
  -a "${OUT}/qa/Summary.Illumina.GenomeCoverage.tab" \
  -a "${OUT}/log/errors.tsv" \
  "${USER}@cdc.gov"

elif [[ -f "${OUT}/qa/Summary.Illumina.GenomeCoverage.tab" ]]; then
  echo -e "Assembly and QA finished on $(date)\n${OUT}" | mail \
  -s "${num_assemblies} assembled $(basename "${OUT}") [HPC]" \
  -S smtp="smtpgw.cdc.gov" \
  -a "${OUT}/qa/Summary.Illumina.GenomeCoverage.tab" \
  "${USER}@cdc.gov"

elif [[ -f "${OUT}/log/errors.tsv" ]]; then
  echo -e "Assembly and QA could not be completed on $(date)\n${OUT}" | mail \
  -s "No assemblies found $(basename "${OUT}") [HPC]" \
  -S smtp="smtpgw.cdc.gov" \
  -a "${OUT}/log/errors.tsv" \
  "${USER}@cdc.gov"
fi

# Move and symlink work directory
date=$(date '+%Y-%m-%d_%H-%M-%S')
mv ${OUT}/.work /scicomp/scratch/${USER}/work/ASM_${date}
ln -s /scicomp/scratch/${USER}/work/ASM_${date} ${OUT}/.work
