/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    wf-paired-end-illumina-assembly Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

process.shell = ['/bin/bash']

// Global default params
params {

    // Input options
    inpath                     = null

    // Boilerplate options
    bigdata                    = false
    outpath                    = new File("${launchDir}").getCanonicalPath()
    logpath                    = new File("${params.outpath}/log").getCanonicalPath()
    process_log_dir            = new File("${params.outpath}/log/process_logs").getCanonicalPath()
    publish_dir_mode           = 'copy'
    help                       = false
    version                    = false
    enable_conda               = false
    enable_conda_yml           = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
// For big data jobs, use big data config instead
includeConfig (params.bigdata ? "conf/big_data.config" : "conf/base.config")

profiles {
    // nf-core profiles
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        shifter.enabled        = false
        fixOwnership           = true
        runOptions             = "-u \$(id -u):\$(id -g)"
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        shifter.enabled        = false
        singularity.cacheDir   = "${baseDir}/assets"
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
    }
    // Univa Grid Engine profiles
    sge {
        process {
            executor = 'sge'
            penv     = 'smp'
            queue    = 'all.q'
        }
        executor {
            queueSize    = 100
            pollInterval = '15 sec'
        }
    }
    short {
        process {
            queue = 'short.q'
        }
    }
    highmem {
        process {
            queue = 'highmem.q'
        }
    }
    // Test profiles
    test      { includeConfig 'conf/test.config'      }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.logpath}/timeline.${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.logpath}/report.${trace_timestamp}.html"
}
trace {
    enabled = true
    fields  = 'task_id,name,status,exit,realtime,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar'
    file    = "${params.logpath}/trace.${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.logpath}/pipeline_dag.${trace_timestamp}.html"
}

executor {
    queueSize = 2
}


manifest {
    name = 'wf-paired-end-illumina-assembly'
    author = 'Christopher A. Gulvik'
    description = 'Trim, assemble, and annotate paired end illumina reads'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond a maximum limit
// This code is from: https://github.com/nf-core/rnaseq/blob/3643a94411b65f42bce5357c5015603099556ad9/nextflow.config
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}