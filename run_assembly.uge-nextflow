#!/usr/bin/env bash
#$ -cwd

# This script is to run the wf-paired-end-illumina-assembly workflow on the UGE cluster

# Define script usage

usage() {
  echo "
Usage: ${0##*/} InputDirectory [OutputDirectory] [-h|--help]
  
Required:
  <InputDirectory>   Path containing PE Illumina 1.8+ files as *.fastq.gz
  
  Sample names are extracted from the first underscore of read files. Hyphens,
  periods, and commas are automatically discarded from the name to avoid errors.
  WARNING: If you have HiSeq data where samples are ran on more than one lane, 
  be sure to concatenate them.
  Sample pairing of sister reads is done by consecutively using filenames sorted
  with \`ls\`, which flexibly allows for naming other than traditional R1 and R2.
  Verify that files properly will pair by checking the output order of \`ls\`
  within the <InputDirectory>.
Optional:
  -h | --help        Show this help message and exit.
  <OutputDirectory>  Location for the output files, which
                     includes job logfiles. Output files
                     will be overwritten if already present.
                     Default: current working directory.     
  
  "
}

# Check requirements
[[ $1 == "--help" || $1 == "-h" ]] && { usage; exit 0; }
if [[ $# -lt 1  || $# -gt 2 ]]; then
  echo "ERROR: improper number ("$#") of arguments provided" >&2
  usage
  exit 1
fi

# I/O handling
IN=$(readlink -f "$1")
if [[ -z "$2" ]]; then
  OUT="${PWD}"
else
  OUT=$(readlink -f "$2")
fi

# Set up tmp and cache directories for Singularity
mkdir -p ${HOME}/tmp && export TMPDIR=${HOME}/tmp
mkdir -p /scicomp/scratch/$USER/singularity.cache && export NXF_SINGULARITY_CACHEDIR=/scicomp/scratch/${USER}/singularity.cache

# Get LAB_HOME or custom tmp/cache variables from .bashrc
source ${HOME}/.bashrc

# Add found files to an array
found_files=( $(find ${IN} -name "*fastq.gz" -o -name "*fq.gz") )

# Check to see if FastQ files are present in IN
if [[ ${#found_files[@]} -ge 2 ]]; then
  # Arrays for submissions
  submitted=()
  not_submitted=()

  # Counter to count basename - if >=1, skips following lines
  unset counter
  declare -A counter

  # Loop over find command for fastq.gz files
  for line in "${found_files[@]}";
  do
    base=$(basename ${line} | sed -r 's/(_R).*$//') # Cut filename at 'R' or else x_ and x1_ will show submitted
    clean_base=$(echo $base | sed 's/[-._]*$//') # Remove trailing separators to display later
    count=$(find ${IN} -name "${base}*" | wc -l)
    (( counter[${base}]++ )) || \
    if [[ $(( ${count}/2 )) -ge 1 ]]; then
      submitted+=(${clean_base})
    else
      not_submitted+=(${clean_base})
    fi
  done

# Give error message if FastQ files are not found
else
  echo -e "FastQ files are not found in ${IN}"
  exit 1
fi

# Color output
GREEN='\033[0;32m'
RED='\033[0;31m'
RESET='\033[0m'

# If FastQ files are able to be submitted, submit and display basenames
if [[ ${#submitted[@]} -ge 1 ]]; then
  # Submit Nextflow pipeline to HPC
  qsub \
    -v NXF_SINGULARITY_CACHEDIR=${NXF_SINGULARITY_CACHEDIR} \
    -v TMPDIR=${TMPDIR} \
    -v OUT=${OUT} \
    -v IN=${IN} \
    -v LAB_HOME=${LAB_HOME} \
    -o ${OUT}/log/ \
    -e ${OUT}/log/ \
    -M ${USER}@cdc.gov \
    -m ba \
    -N ASM_${#submitted[@]} \
    -q all.q \
    ${LAB_HOME}/workflows/wf-paired-end-illumina-assembly/_run_assembly.uge-nextflow

  # Display basename of FastQ files submitted
  echo -e "\nInput directory: ${IN}"
  echo -e "Output directory: ${OUT}"
  echo -e "\n${GREEN}Generating annotated assemblies for:"

  for elem in "${submitted[@]}"; do
    echo "${elem}"
  done
  echo -e "${RESET}"
fi

# Display basename of FastQ files that weren't submitted
if [[ ${#not_submitted[@]} -ge 1 ]]; then
  echo -e "${RED}Cannot generate assemblies for:"

  for elem in "${not_submitted[@]}"; do
    echo "${elem}"
  done
  echo -e "${RESET}"
fi

# Set up log directory in OUT directory
mkdir -p ${OUT}/log
