/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    wf-paired-end-illumina-assembly Nextflow workflows config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// This code is adapted from: https://github.com/bactopia/bactopia

params {
    available_workflows {
        assemblers      = ['spades', 'skesa']
    }
    workflows {
        // Workflows (main assembly workflow)
        'spades' {
            description: 'Trim, assemble, and annotate paired end illumina reads using SPAdes.'
            includes    = ['spades']
            is_workflow = true
            modules     = ["convert_samplesheet_python", "infile_handling_unix", "remove_phix_bbduk",
                            "trim_reads_trimmomatic", "overlap_paired_reads_flash", "assemble_contigs_spades",
                            "filter_contigs_biopython", "polish_assembly_bwa_pilon", "annotate_prokka",
                            "extract_16S_biopython", "extract_16S_barrnap", "align_16S_blast",
                            "best_16S_blastn_bitscore_taxon_python", "split_multifasta_assembly_biopython",
                            "remove_host_hostile", "remove_host_sra_human_scrubber"]
        }

        'skesa' {
            description: 'Trim, assemble, and annotate paired end illumina reads using SKESA.'
            includes    = ['skesa']
            is_workflow = true
            modules     = ["convert_samplesheet_python", "infile_handling_unix", "remove_phix_bbduk",
                            "trim_reads_trimmomatic", "overlap_paired_reads_flash", "assemble_contigs_skesa",
                            "filter_contigs_biopython", "map_contigs_bwa", "annotate_prokka",
                            "extract_16S_biopython", "extract_16S_barrnap", "align_16S_blast",
                            "best_16S_blastn_bitscore_taxon_python", "split_multifasta_assembly_biopython",
                            "remove_host_hostile", "remove_host_sra_human_scrubber"]
        }

        // Subworkflows

        // Modules (contains params.config)
        // local
        'convert_samplesheet_python' {
            path        = "modules/local/convert_samplesheet_python"
        }
        'infile_handling_unix' {
            path        = "modules/local/infile_handling_unix"
        }
        'remove_host_hostile' {
            path        = "modules/local/remove_host_hostile"
        }
        'remove_host_sra_human_scrubber' {
            path        = "modules/local/remove_host_sra_human_scrubber"
        }
        'remove_phix_bbduk' {
            path        = "modules/local/remove_phix_bbduk"
        }
        'trim_reads_trimmomatic' {
            path        = "modules/local/trim_reads_trimmomatic"
        }
        'overlap_paired_reads_flash' {
            path        = "modules/local/overlap_paired_reads_flash"
        }
        'read_classify_kraken' {
            path        = "modules/local/read_classify_kraken"
        }
        'assemble_contigs_spades' {
            path        = "modules/local/assemble_contigs_spades"
        }
        'assemble_contigs_skesa' {
            path        = "modules/local/assemble_contigs_skesa"
        }
        'filter_contigs_biopython' {
            path        = "modules/local/filter_contigs_biopython"
        }
        'polish_assembly_bwa_pilon' {
            path        = "modules/local/polish_assembly_bwa_pilon"
        }
        'map_contigs_bwa' {
            path        = "modules/local/map_contigs_bwa"
        }
        'extract_read_alignment_depths_bedtools' {
            path        = "modules/local/extract_read_alignment_depths_bedtools"
        }
        'mlst_mlst' {
            path        = "modules/local/mlst_mlst"
        }
        'annotate_prokka' {
            path        = "modules/local/annotate_prokka"
        }
        'extract_16S_biopython' {
            path        = "modules/local/extract_16S_biopython"
        }
        'extract_16S_barrnap' {
            path        = "modules/local/extract_16S_barrnap"
        }
        'align_16S_blast' {
            path        = "modules/local/align_16S_blast"
        }
        'best_16S_blastn_bitscore_taxon_python' {
            path        = "modules/local/best_16S_blastn_bitscore_taxon_python"
        }
        'qa_assembly_quast' {
            path        = "modules/local/qa_assembly_quast"
        }
        'calculate_coverage_unix' {
            path        = "modules/local/calculate_coverage_unix"
        }
        'split_multifasta_assembly_biopython' {
            path        = "modules/local/split_multifasta_assembly_biopython"
        }

        // nf-core/modules
    }
}
