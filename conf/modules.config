/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    /*
    ================================================================================
                            All modules
    ================================================================================
    */
    publishDir =  [
        [
            // QC file checks
            path:    params.qc_filecheck_log_dir,
            mode:    params.publish_dir_mode,
            pattern: "*{File,Files}.tsv"
        ],
        [
            // Stdout and stderr
            path:    params.process_log_dir,
            mode:    params.publish_dir_mode,
            pattern: ".command.*",
            saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
        ]
    ]

    /*
    ================================================================================
                            Module specific
    ================================================================================
    */

    /*
     * Local modules
     */
    withName: ANNOTATE_PROKKA {
        publishDir = [
            [
                path:    { "${params.outdir}/Annotation/Prokka" },
                mode:    params.publish_dir_mode,
                pattern: "*.gbk"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ASSEMBLE_CONTIGS_SKESA {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/SKESA/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "contigs.fasta"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]

        ]
    }

    withName: ASSEMBLE_CONTIGS_SPADES {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/SPAdes/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: { "${meta.id}/*" }
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: BEST_16S_BLASTN_BITSCORE_TAXON_PYTHON {
        publishDir = [
            [
                path:    { "${params.outdir}/SSU/BLAST/" },
                mode:    params.publish_dir_mode,
                pattern: "*.blast.tsv.gz"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: CALCULATE_COVERAGE_UNIX {
        publishDir = [
             [
                path:    { "${params.outdir}/Assembly/QC/${meta.id}/"},
                mode:    params.publish_dir_mode,
                pattern: "*GenomeCoverage.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: EXTRACT_16S_BARRNAP {
        publishDir = [
            [
                path:    { "${params.outdir}/SSU/" },
                mode:    params.publish_dir_mode,
                pattern: "16S.*.fa"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: MAP_CONTIGS_BWA {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/" },
                mode:    params.publish_dir_mode,
                pattern: "*.fna"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: OVERLAP_PAIRED_READS_FLASH {
        publishDir = [
            [
                path:    { "${params.outdir}/ReadTrimming/FLASH/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{overlap.tsv,clean-reads.tsv}"
            ],
            [
                path:    { "${params.outdir}/ReadTrimming/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{fq.gz}"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: POLISH_ASSEMBLY_BWA_PILON {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/" },
                mode:    params.publish_dir_mode,
                pattern: "*.fna"
            ],
            [
                path:    { "${params.outdir}/Assembly/${assembler}/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{InDels,SNPs}-corrected.cnt.txt"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]

        ]
    }

    withName: QA_ASSEMBLY_QUAST {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/QC/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*{QuastSummary,CleanedReads-Bases}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: READ_CLASSIFY_KRAKEN_ONE {
        publishDir = [
            [
                path:    { "${params.outdir}/Taxonomy/kraken/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*{_kraken1.tab.gz,taxonomy1-reads.tab}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: READ_CLASSIFY_KRAKEN_TWO {
        publishDir =[
            [
                path:    { "${params.outdir}/Taxonomy/kraken2/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*{_kraken2.tab.gz,taxonomy2-reads.tab}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: TRIM_READS_TRIMMOMATIC {
        publishDir = [
            [
            path:    { "${params.outdir}/ReadTrimming/Trimmomatic" },
            mode:    params.publish_dir_mode,
            pattern: "*.trimmo.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*{File,Files}.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    /*
     * nf-core modules
     */
    withName: QA_ASSEMBLY_GTDBTK {
        publishDir = [
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.summary.tsv",
                saveAs:  { filename -> "Summary.GTDBTk.tab" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]

    }

    withName: QA_ASSEMBLY_BUSCO {
        ext.args = "-m genome"
        publishDir = [
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.batch_summary.txt",
                saveAs:  { filename -> "Summary.BUSCO.tab" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.*",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    MODULES.CONFIG FUNCTIONS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Convert params.assembler to lowercase
def toLower(it) {
    it.toString().toLowerCase()
}

params.assembler = toLower(params.assembler)

if (params.assembler == "skesa") {
    assembler = "SKESA"
} else {
    assembler = "SPAdes"
}
