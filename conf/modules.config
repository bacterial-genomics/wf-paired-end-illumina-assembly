/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    /*
    ================================================================================
                            All modules
    ================================================================================
    */
    publishDir =  [
        [
            // QC file checks
            path:    params.qc_filecheck_log_dir,
            mode:    params.publish_dir_mode,
            pattern: "*_File.tsv"
        ],
        [
            // Stdout and stderr
            path:    params.process_log_dir,
            mode:    params.publish_dir_mode,
            pattern: ".command.{out,err}",
            saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
        ]
    ]

    /*
    ================================================================================
                            Module specific
    ================================================================================
    */

    /*
     * Local modules
     */

    withName: INFILE_HANDLING_UNIX {
        publishDir = [
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*.SHA256-checksums.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ESTIMATE_GENOME_SIZE_KMC {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/KMC" },
                mode:    params.publish_dir_mode,
                pattern: "*.{stdout.log,genome_size.txt}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: COUNT_TOTAL_BP_INPUT_READS_SEQTK {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Seqtk/counts" },
                mode:    params.publish_dir_mode,
                pattern: "*.{stdout.log,input_total_bp.txt}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ESTIMATE_ORIGINAL_INPUT_DEPTH_UNIX {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Unix" },
                mode:    params.publish_dir_mode,
                pattern: "*.{initial_depth.txt,fraction_of_reads_to_use.txt}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: SUBSAMPLE_READS_TO_DEPTH_SEQTK {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Seqtk/subsampled" },
                mode:    params.publish_dir_mode,
                pattern: "*_R{1,2}.subsampled.{fq,fastq}.gz"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }


    withName: SUBSAMPLE_READS_TO_DEPTH_SEQKIT {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/SeqKit/subsampled" },
                mode:    params.publish_dir_mode,
                pattern: "*_R{1,2}.subsampled.{fq,fastq}.gz"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ANNOTATE_PROKKA {
        publishDir = [
            [
                path:    { "${params.outdir}/Annotation/Prokka" },
                mode:    params.publish_dir_mode,
                pattern: "*.gbk"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ASSEMBLE_CONTIGS_SKESA {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/${meta.assembler}/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*_contigs.fasta"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: 'ASSEMBLY:ASSEMBLE_CONTIGS:ASSEMBLE_CONTIGS_SPADES' {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/${meta.assembler}/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{log,gfa,gz,fasta}"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: BEST_16S_BLASTN_BITSCORE_TAXON_PYTHON {
        publishDir = [
            [
                path:    { "${params.outdir}/SSU/BLAST" },
                mode:    params.publish_dir_mode,
                pattern: "*.blast.tsv.gz"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: CALCULATE_COVERAGE_UNIX {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/QA/${meta.id}/"},
                mode:    params.publish_dir_mode,
                pattern: "*GenomeCoverage.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: CLASSIFY_16S_RDP {
        publishDir = [
            [
                path:    { "${params.outdir}/SSU/RDP" },
                mode:    params.publish_dir_mode,
                pattern: "*.RDP.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: EXTRACT_16S_BARRNAP {
        publishDir = [
            [
                path:    { "${params.outdir}/SSU" },
                mode:    params.publish_dir_mode,
                pattern: "16S.*.fa"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: MAP_CONTIGS_BWA {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly" },
                mode:    params.publish_dir_mode,
                pattern: "*.fna"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: OVERLAP_PAIRED_READS_FLASH {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/FLASH" },
                mode:    params.publish_dir_mode,
                pattern: "*.FLASH.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads" },
                mode:    params.publish_dir_mode,
                pattern: "*.fq.gz"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*.SHA256-checksums.tsv"
            ],            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: POLISH_ASSEMBLY_BWA_PILON {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly" },
                mode:    params.publish_dir_mode,
                pattern: "*.fna"
            ],
            [
                path:    { "${params.outdir}/Assembly/${meta.assembler}/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{InDels,SNPs}-corrected.cnt.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: QA_ASSEMBLY_QUAST {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/QA/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*{QuastSummary,CleanedReads-Bases}.tsv"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: 'ASSEMBLY:READ_CLASSIFY_KRAKEN_ONE' {
        publishDir = [
            [
                path:    { "${params.outdir}/Taxonomy/kraken/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{tsv.gz,tsv}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: READ_CLASSIFY_KRAKEN_TWO {
        publishDir = [
            [
                path:    { "${params.outdir}/Taxonomy/kraken2/${meta.id}/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{tsv.gz,tsv}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: TRIM_READS_FASTP {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Fastp" },
                mode:    params.publish_dir_mode,
                pattern: "*.fastp.*"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/Fastp" },
                mode:    params.publish_dir_mode,
                pattern: "*{paired,single}.fq"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: TRIM_READS_TRIMMOMATIC {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Trimmomatic" },
                mode:    params.publish_dir_mode,
                pattern: "*.Trimmomatic.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/Trimmomatic" },
                mode:    params.publish_dir_mode,
                pattern: "*.{paired,single}.fq"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: REMOVE_HOST_HOSTILE {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/Hostile" },
                mode:    params.publish_dir_mode,
                pattern: "*.Hostile-Removal.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/Hostile" },
                mode:    params.publish_dir_mode,
                pattern: "hostile/*.clean_{1,2}.{fq,fastq}{,.gz}",
                saveAs:  { file ->
                          def newName = file.toString()  // Ensure it's treated as a string
                                            .replaceFirst(/^.*\//, '')  // Remove the directory path ("hostile/")
                                            .replaceFirst(/\.clean_[12]/, '')  // Remove the .clean_1 or .clean_2 within filename
                          return "${newName}" }
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: REMOVE_HOST_SRA_HUMAN_SCRUBBER {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/SRA-Human-Scrubber" },
                mode:    params.publish_dir_mode,
                pattern: "*.SRA-Human-Scrubber-Removal.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/SRA-Human-Scrubber" },
                mode:    params.publish_dir_mode,
                pattern: "*scrubbed.fastq.gz"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/SRA-Human-Scrubber" },
                mode:    params.publish_dir_mode,
                pattern: "*.stderr.txt"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: REMOVE_BROKEN_PAIRS_BBTOOLS_REPAIR {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/SRA-Human-Scrubber" },
                mode:    params.publish_dir_mode,
                pattern: "*.BBTools-Repair-Removal.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/SRA-Human-Scrubber" },
                mode:    params.publish_dir_mode,
                pattern: "*repaired*.fastq.gz"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: REMOVE_PHIX_BBDUK {
        publishDir = [
            [
                path:    { "${params.outdir}/CleanedReads/BBDUK" },
                mode:    params.publish_dir_mode,
                pattern: "*.BBDuk.tsv"
            ],
            [
                path:    { "${params.outdir}/CleanedReads/BBDUK" },
                mode:    params.publish_dir_mode,
                pattern: "*_noPhiX-R{1,2}.fsq"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: CLASSIFY_CONTIGS_CAT {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/QA/${meta.id}/CAT/" },
                mode:    params.publish_dir_mode,
                pattern: "*CAT-Classification*.{tsv,log.gz}"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: ASSESS_ASSEMBLY_CHECKM2 {
        publishDir = [
            [
                path:    { "${params.outdir}/Assembly/QA/${meta.id}/CheckM2/" },
                mode:    params.publish_dir_mode,
                pattern: "*.{tsv.gz,log.gz,results.tsv}"
            ],
            [
                path:    params.qc_filecheck_log_dir,
                mode:    params.publish_dir_mode,
                pattern: "*_File.tsv"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: CREATE_EXCEL_RUN_SUMMARY_PYTHON {
        publishDir = [
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "Summary-Report.xlsx"
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${task.process}${filename}" }
            ]
        ]
    }

    /*
     * nf-core modules
     */
    withName: QA_ASSEMBLY_GTDBTK {
        publishDir = [
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.summary.tsv",
                saveAs:  { filename -> "Summary.GTDB-Tk.tsv" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }

    withName: QA_ASSEMBLY_BUSCO {
        ext.args = "-m genome"
        publishDir = [
            [
                path:    { "${params.outdir}/Summaries" },
                mode:    params.publish_dir_mode,
                pattern: "*.batch_summary.txt",
                saveAs:  { filename -> "Summary.BUSCO.tsv" }
            ],
            [
                path:    params.process_log_dir,
                mode:    params.publish_dir_mode,
                pattern: ".command.{out,err}",
                saveAs:  { filename -> "${meta.id}.${task.process}${filename}" }
            ]
        ]
    }
}
