/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running minimal tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a fast and simple pipeline test.

    Use as follows:
        nextflow run main.nf -profile test,<docker/singularity> --outdir results_test

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name                              = 'Test profile high CPU for CAT and CheckM2'
    config_profile_description                       = 'Minimal test dataset to check pipeline function'

    // High CPU resources **not** compatible with GitHub Actions
    max_cpus                                         = 36
    max_memory                                       = '6.GB'
    max_time                                         = '6.h'

    // Input data
    input                                            = 'https://raw.githubusercontent.com/bacterial-genomics/test-datasets/assembly/samplesheets/samplesheet.csv'

    // Use faster SKESA assembler workflow
    assembler                                        = 'skesa'

    // Skip kraken1 and kraken2
    kraken1_db                                       = ""
    kraken2_db                                       = ""

    // GitHub Actions cannot support large RAM use and we unfortunately
    //   must skip these channels even for the small miniburk dataset.
    //   NOTE: the defaults turned on should be tested locally prior to
    //         submitting changes to GitHub.
    host_remove                                      = 'skip'

    // Skip subsampling routine entirely, faster, and not needed
    //  for this miniburk test set.
    // ESTIMATE_GENOME_SIZE_KMC channel sometimes gives C++
    //  memory issue, e.g., `cat kmc.test_miniburk.stderr.log`
    //  "Error: std::bad_alloc"
    depth                               = 0

    // Modify minimum filesize parameters to allow pipeline completion
    min_filesize_fastq_input                         = '15M'
    min_filesize_fastq_hostile_removed               = '15M'
    min_filesize_fastq_sra_human_scrubber_removed    = '15M'
    min_filesize_broken_pairs_bbtools_repair_removed = '15M'
    min_filesize_fastq_phix_removed                  = '1k'
    min_filesize_fastq_adapters_removed              = '1k'
    min_filesize_non_overlapping_fastq               = '1k'
    min_filesize_binary_pe_alignment                 = '1k'
    min_filesize_filtered_assembly                   = '1k'
    min_filesize_polished_assembly                   = '1k'
    min_filesize_final_assembly                      = '1k'
    min_filesize_annotated_genbank                   = '1k'
}

process {
    // Allow it to retry a failed channel
    errorStrategy = { task.exitStatus in [1,71,104,134,137,139,140,143,255] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // for faster runtime with CAT
    withName: ASSEMBLY:ASSEMBLY_ASSESSMENT:CLASSIFY_CONTIGS_CAT {
        cpus = {check_max( 32 * task.attempt, 'cpus')}
        memory = {check_max( 32.GB * task.attempt, 'memory')}
    }

    // for faster runtime with CheckM2
    withName: ASSEMBLY:ASSEMBLY_ASSESSMENT:ASSESS_ASSEMBLY_CHECKM2 {
        cpus = {check_max( 32 * task.attempt, 'cpus')}
        memory = {check_max( 32.GB * task.attempt, 'memory')}
    }
}
